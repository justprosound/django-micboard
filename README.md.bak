# django-micboard# django-micboard: Django App for Shure Wireless Microphone Monitoring



# django-micboard

> **⚠️ ACTIVE DEVELOPMENT**: This project is under active development and not yet ready for production use. Features, APIs, and documentation may change without notice.

A community-driven open source Django app for real-time monitoring and management of Shure wireless microphone systems. Integrates with external Shure System API middleware for device communication.

## Version: 25.10.15

This project uses [Calendar Versioning](https://calver.org/) (YY.MM.DD) for easier tracking of changes against releases.



A Django application for real-time monitoring of Shure wireless microphone systems via the Shure System API.## Documentation



## VersionComplete documentation is available in the `docs/` directory:



Uses **CalVer** (Calendar Versioning): `YY.MM.DD`- **[Quick Start Guide](docs/quickstart.md)** - Get up and running quickly

- **[Configuration Guide](docs/configuration.md)** - Detailed configuration options

Current version: **25.10.15** (October 15, 2025)- **[API Reference](docs/api-reference.md)** - Complete REST and WebSocket API documentation

- **[Architecture Overview](docs/architecture.md)** - System design and data flow

## Features- **[Developer Guide](docs/development.md)** - Contributing and extending the app

- **[User Assignments](docs/user-assignments.md)** - Managing device assignments

- Real-time device monitoring via WebSocket- **[Rate Limiting](docs/rate-limiting.md)** - API rate limiting configuration

- Integration with Shure System API middleware- **[Changelog](docs/changelog.md)** - Version history and updates

- Device discovery and management

- User assignment systemTo build the documentation locally:

- Location tracking

- Alert management```bash

- Rate-limited REST API endpointspip install -r docs/requirements.txt

- Django Channels for live updatesmkdocs serve

```

## Architecture

Then visit http://127.0.0.1:8000 in your browser.

```

Shure Devices → Shure System API (external) → poll_devices → Models → WebSocket → Frontend## Architecture

```

This app uses a **middleware-based architecture**:

- **Shure System API**: External middleware that handles device communication

- **poll_devices**: Management command that polls the API and broadcasts updates- **Shure System API Server**: Installed middleware that handles all communication with Shure devices via official APIs

- **WebSocket**: Real-time updates via Django Channels- **Django App**: Web interface that consumes the Shure System API for data display and real-time updates

- **WebSocket Layer**: Real-time updates via Django Channels for live device monitoring

## Requirements- **Background Polling**: Management command that polls the API and broadcasts updates



- Python 3.9+## Requirements

- Django 4.2+ or 5.0+

- Shure System API server (separate installation required)- Python 3.9+

- Redis (recommended for production WebSocket support)- Django 4.2+ or 5.0+

- Shure System API server (installed separately)

## Quick Start- Redis (recommended for production WebSocket support)



### 1. Install Shure System API## Installation



Download and install from [Shure's website](https://www.shure.com/en-US/products/software/systemapi).### Option 1: Install from PyPI (Recommended)



### 2. Clone and Install```bash

# Basic installation

```bashpip install django-micboard

git clone https://github.com/justprosound/django-micboard.git

cd django-micboard# With Redis support (recommended for production)

pip install -e .  # Editable install for developmentpip install django-micboard[redis]

```

# With development tools

### 3. Configure Django Projectpip install django-micboard[dev]

```

Add to your `settings.py`:

### Option 2: Install from GitHub

```python

INSTALLED_APPS = [```bash

    'channels',# Latest from main branch

    'micboard',pip install git+https://github.com/justprosound/django-micboard.git

    # ... other apps

]# Specific version tag

pip install git+https://github.com/justprosound/django-micboard.git@v25.10.14

MICBOARD_CONFIG = {```

    'SHURE_API_BASE_URL': 'http://localhost:8080',

    'SHURE_API_TIMEOUT': 10,### Option 3: Install from Source

    'SHURE_API_VERIFY_SSL': True,

}```bash

git clone https://github.com/justprosound/django-micboard.git

ASGI_APPLICATION = 'your_project.asgi.application'cd django-micboard

pip install -e .  # Editable install for development

CHANNEL_LAYERS = {```

    'default': {

        'BACKEND': 'channels.layers.InMemoryChannelLayer'## Setup

        # For production, use Redis

    },### 1. Install Shure System API Server

}

```1. Download and install the Shure System API from the [Shure System API product page](https://www.shure.com/en-US/products/software/systemapi)

2. Install it on a computer connected to your Shure device network

### 4. Update ASGI Configuration3. Configure TLS certificates if accessing remotely (see Shure documentation)

4. Start the System API server and note the URL (e.g., `http://localhost:8080`)

Update your `asgi.py`:

 Static assets include app icons under `micboard/static/micboard/`. Splash screens have been removed.

```python

from channels.routing import ProtocolTypeRouter, URLRouter1. Add 'micboard' to `INSTALLED_APPS` in your Django settings:

from channels.auth import AuthMiddlewareStack   ```python

from django.core.asgi import get_asgi_application   INSTALLED_APPS = [

from micboard.routing import websocket_urlpatterns       # ... other apps

       'channels',

application = ProtocolTypeRouter({       'micboard',

    "http": get_asgi_application(),   ]

    "websocket": AuthMiddlewareStack(   ```

        URLRouter(websocket_urlpatterns)

    ),2. Configure the Shure System API connection in your settings:

})   ```python

```   MICBOARD_CONFIG = {

       'SHURE_API_BASE_URL': 'http://localhost:8080',

### 5. Add URLs       'SHURE_API_USERNAME': None,  # If authentication required

       'SHURE_API_PASSWORD': None,  # If authentication required

Include in your main `urls.py`:       'SHURE_API_TIMEOUT': 10,

       'SHURE_API_VERIFY_SSL': True,

```python

from django.urls import include, path       # Retry and rate limiting

       'SHURE_API_MAX_RETRIES': 3,

urlpatterns = [       'SHURE_API_RETRY_BACKOFF': 0.5,

    path('micboard/', include('micboard.urls')),       'SHURE_API_RETRY_STATUS_CODES': [429, 500, 502, 503, 504],

    # ... other paths   }

]   ```

```

   See [docs/configuration.md](docs/configuration.md) for complete configuration options.

### 6. Run Migrations

3. Configure Channels for WebSocket support in your settings:

```bash   ```python

python manage.py migrate   ASGI_APPLICATION = 'your_project.asgi.application'

```

   CHANNEL_LAYERS = {

### 7. Start Services       'default': {

           'BACKEND': 'channels.layers.InMemoryChannelLayer'

Terminal 1 - Run Django with Daphne (for WebSocket support):           # For production, use Redis

       },

```bash   }

daphne -b 0.0.0.0 -p 8000 your_project.asgi:application   ```

```

4. Update your `asgi.py` file:

Terminal 2 - Start polling service:   ```python

   from channels.routing import ProtocolTypeRouter, URLRouter

```bash   from channels.auth import AuthMiddlewareStack

python manage.py poll_devices   from django.core.asgi import get_asgi_application

```   from micboard.routing import websocket_urlpatterns



### 8. Access Dashboard   application = ProtocolTypeRouter({

       "http": get_asgi_application(),

Open browser to: `http://localhost:8000/micboard/`       "websocket": AuthMiddlewareStack(

           URLRouter(websocket_urlpatterns)

## API Endpoints       ),

   })

All endpoints are rate-limited:   ```



- `GET /micboard/` - Main dashboard5. Include the URLs in your main `urls.py`:

- `GET /micboard/api/data/` - Device data (120 req/min)   ```python

- `POST /micboard/api/discover/` - Discover devices (5 req/min)   from django.urls import include, path

- `POST /micboard/api/refresh/` - Force refresh (10 req/min)

- `GET /micboard/api/health/` - API health status   urlpatterns = [

       path('micboard/', include('micboard.urls')),

### WebSocket   ]

   ```

Connect to `ws://your-server/micboard/ws` for real-time updates.

4. **Run migrations**:

## Development   ```bash

   # Create migrations for micboard app

### Install Development Dependencies   python manage.py makemigrations micboard



```bash   # Apply migrations

pip install -r dev-requirements.txt   python manage.py migrate

```   ```



### Run Tests7. Collect static files:

   ```bash

```bash   python manage.py collectstatic

pytest tests/ -v   ```

```

## Usage

### Frontend Development

### Starting the Polling Service

```bash

npm installThe polling service fetches data from the Shure System API and broadcasts updates:

npm run build

``````bash

python manage.py poll_devices

### Build Documentation```



```bashOptions:

pip install -r docs/requirements.txt- `--interval SECONDS`: Polling interval (default: 10 seconds)

mkdocs serve- `--no-broadcast`: Disable WebSocket broadcasting

```

For production, run as a background service using systemd, supervisor, or similar.

Visit http://127.0.0.1:8000 for local documentation.

### Running the Development Server

## Documentation

For WebSocket support, use Daphne instead of the standard Django server:

Complete documentation is available in the `docs/` directory:

```bash

- [Quick Start Guide](docs/quickstart.md)daphne -b 0.0.0.0 -p 8000 your_project.asgi:application

- [Configuration Guide](docs/configuration.md)```

- [API Reference](docs/api-reference.md)

- [Architecture Overview](docs/architecture.md)Or for development:

- [Developer Guide](docs/development.md)```bash

- [User Assignments](docs/user-assignments.md)python manage.py runserver

- [Rate Limiting](docs/rate-limiting.md)```



## Project Structure## API Endpoints



```### Rate Limiting

micboard/

├── admin/          # Django admin interfacesAll API endpoints are rate-limited to prevent abuse:

├── management/     # Management commands (poll_devices)

├── models/         # Django models- **`/api/data/`**: 120 requests/minute (2 req/sec)

├── shure/          # Shure API client- **`/api/discover/`**: 5 requests/minute (discovery is expensive)

├── views/          # REST API and dashboard views- **`/api/refresh/`**: 10 requests/minute

├── static/         # Frontend assets- **`/api/config/`**: 60 requests/minute (default)

└── templates/      # Django templates- **`/api/group/`**: 60 requests/minute (default)

```

Rate limit responses return HTTP 429 with `Retry-After` header.

## Contributing

### Endpoints

This is an open source project. Contributions are welcome!

- **`GET /`** - Main dashboard

1. Fork the repository- `GET /micboard/api/data/` - Get current device data (JSON)

2. Create a feature branch- `POST /micboard/api/discover/` - Trigger device discovery

3. Make your changes- `POST /micboard/api/refresh/` - Force refresh device data

4. Run tests to ensure everything works- `POST /micboard/api/slot/` - Update slot configuration

5. Submit a pull request- `POST /micboard/api/config/` - Update configuration

- `POST /micboard/api/group/` - Update group settings

## License

### New Views

GNU Affero General Public License v3.0 or later (AGPL-3.0-or-later)

The app now includes several new views to filter and display devices:

See [LICENSE](LICENSE) for full text.

- **Devices by Type**: `/micboard/device-type/<device_type>/` (e.g., `/micboard/device-type/uhfr/`)

## Support- **Devices by Building**: `/micboard/building/<building_name>/` (e.g., `/micboard/building/Building%20A/`)

- **Devices by User**: `/micboard/user/<username>/` (e.g., `/micboard/user/admin/`)

- **Documentation**: See `docs/` directory- **Devices by Room**: `/micboard/room/<room_name>/` (e.g., `/micboard/room/Room%20101/`)

- **Issues**: Use GitHub issue tracker- **Devices by Priority**: `/micboard/priority/<priority>/` (e.g., `/micboard/priority/high/`)

- **Shure API Documentation**: [Official Shure API Reference](https://shure.stoplight.io)

These views are also accessible via dropdown menus in the main dashboard navigation.

## Credits

### WebSocket Connection

Inspired by the original [micboard.io](https://micboard.io/) project.

Connect to: `ws://your-server/micboard/ws`

The WebSocket will receive real-time updates with device data.

## Configuration

### Device Management

Devices are automatically discovered and created via the Shure System API. You can manage them through:

1. **Django Admin**: Go to `/admin/micboard/device/`
2. **API Discovery**: POST to `/micboard/api/discover/`

### Groups

Create groups in Django Admin to organize devices into logical collections.

## Dependencies

### Python Dependencies

Python dependencies are managed using `pip-tools` and `pyproject.toml`. See [docs/dependency-management.md](docs/dependency-management.md) for details on how to update and manage Python dependencies.

### Frontend Dependencies

Frontend dependencies (Bootstrap, Sass, IBM Plex font) are managed using `npm`. Refer to the "Frontend Development" section under "Development" for instructions on installing and building these assets.

## Development

### Project Structure

```
micboard/
├── management/
│   └── commands/
│       └── poll_devices.py       # Background polling command
├── migrations/                    # Database migrations
├── static/micboard/              # Static assets (JS, CSS, images)
├── templates/micboard/           # Django templates
├── admin.py                      # Django admin configuration
├── apps.py                       # App configuration
├── consumers.py                  # WebSocket consumers
├── models.py                     # Database models
├── routing.py                    # WebSocket routing
├── shure_api_client.py          # Shure System API client
├── urls.py                      # URL configuration
└── views.py                     # View functions
```

### Frontend Development

This project uses `npm` to manage frontend dependencies and build static assets.

1.  **Install Node.js dependencies**:
    ```bash
    npm install
    ```

2.  **Build static assets**:
    ```bash
    npm run build
    ```

### Python Dependency Management

Python dependencies are managed using `pip-tools` and `pyproject.toml`. See [docs/dependency-management.md](docs/dependency-management.md) for details on how to update and manage Python dependencies.

### Testing

```bash
python manage.py test micboard
```

## Troubleshooting

### API Connection Issues

1. Verify Shure System API server is running
2. Check `SHURE_API_BASE_URL` in settings
3. Test API connection:
   ```bash
   curl http://localhost:8080/api/v1/devices
   ```

### WebSocket Issues

1. Ensure Channels is properly configured
2. For production, use Redis channel layer instead of in-memory
3. Check that Daphne is running (not standard Django server)

### No Device Data

1. Ensure devices are powered on and connected to network
2. Trigger discovery: POST to `/micboard/api/discover/`
3. Check polling service logs: look for errors in `micboard.log`
4. Verify Shure System API can see devices

## Production Deployment

### Using systemd for Polling Service

Create `/etc/systemd/system/micboard-poll.service`:

```ini
[Unit]
Description=Micboard Device Polling Service
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/path/to/your/project
ExecStart=/path/to/venv/bin/python manage.py poll_devices --interval 10
Restart=always

[Install]
WantedBy=multi-user.target
```

Enable and start:
```bash
sudo systemctl enable micboard-poll
sudo systemctl start micboard-poll
```

### Using systemd for Daphne

Create `/etc/systemd/system/daphne.service`:

```ini
[Unit]
Description=Daphne ASGI Server
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/path/to/your/project
ExecStart=/path/to/venv/bin/daphne -b 0.0.0.0 -p 8000 your_project.asgi:application
Restart=always

[Install]
WantedBy=multi-user.target
```

## License

GNU Affero General Public License v3.0 or later (AGPL-3.0-or-later)

## Support

For Shure System API issues, consult the [official Shure documentation](https://www.shure.com/en-US/products/software/systemapi).

For app issues or questions, please open an issue on [GitHub](https://github.com/justprosound/django-micboard/issues).
