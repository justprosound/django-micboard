# Generated by Django 4.2.25 on 2025-10-14 13:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Alert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("battery_low", "Battery Low"),
                            ("battery_critical", "Battery Critical"),
                            ("signal_loss", "Signal Loss"),
                            ("audio_low", "Audio Low"),
                            ("device_offline", "Device Offline"),
                            ("device_online", "Device Online"),
                        ],
                        help_text="Type of alert",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("acknowledged", "Acknowledged"),
                            ("resolved", "Resolved"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        help_text="Current status of the alert",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(help_text="Alert message text")),
                (
                    "device_data",
                    models.JSONField(
                        blank=True,
                        help_text="Snapshot of device state when alert was triggered",
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the alert was created"),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was sent", null=True
                    ),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was acknowledged", null=True
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, help_text="When the alert was resolved", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Alert",
                "verbose_name_plural": "Alerts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "api_device_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier from Shure System API",
                        max_length=100,
                        null=True,
                        unique=True,
                    ),
                ),
                ("ip", models.GenericIPAddressField(help_text="IP address of the device")),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("uhfr", "UHF-R"),
                            ("qlxd", "QLX-D"),
                            ("ulxd", "ULX-D"),
                            ("axtd", "Axient Digital"),
                            ("p10t", "P10T"),
                            ("offline", "Offline"),
                        ],
                        help_text="Type of Shure device",
                        max_length=10,
                    ),
                ),
                ("channel", models.PositiveIntegerField(help_text="Channel number on the device")),
                (
                    "slot",
                    models.PositiveIntegerField(
                        help_text="Unique slot number for this device/channel combination",
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Human-readable name for the device", max_length=100
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this device is currently active"
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this device was successfully polled",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Device",
                "verbose_name_plural": "Devices",
                "ordering": ["slot"],
            },
        ),
        migrations.CreateModel(
            name="DiscoveredDevice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "ip",
                    models.GenericIPAddressField(
                        help_text="IP address of the discovered device", unique=True
                    ),
                ),
                (
                    "device_type",
                    models.CharField(help_text="Type of discovered device", max_length=20),
                ),
                (
                    "channels",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of channels on the device"
                    ),
                ),
                (
                    "discovered_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this device was first discovered"
                    ),
                ),
            ],
            options={
                "verbose_name": "Discovered Device",
                "verbose_name_plural": "Discovered Devices",
                "ordering": ["-discovered_at"],
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "group_number",
                    models.PositiveIntegerField(help_text="Unique group number", unique=True),
                ),
                (
                    "title",
                    models.CharField(help_text="Display title for the group", max_length=100),
                ),
                (
                    "slots",
                    models.JSONField(default=list, help_text="List of slot numbers in this group"),
                ),
                (
                    "hide_charts",
                    models.BooleanField(
                        default=False, help_text="Whether to hide charts for this group"
                    ),
                ),
            ],
            options={
                "verbose_name": "Group",
                "verbose_name_plural": "Groups",
                "ordering": ["group_number"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "building",
                    models.CharField(blank=True, help_text="Building name", max_length=100),
                ),
                (
                    "room",
                    models.CharField(blank=True, help_text="Room name or number", max_length=100),
                ),
                (
                    "floor",
                    models.CharField(blank=True, help_text="Floor information", max_length=50),
                ),
                (
                    "name",
                    models.CharField(help_text="Display name for this location", max_length=200),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Detailed description of the location"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this location is currently active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this location was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update timestamp"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to your external location model (e.g., Building, Room)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Location",
                "verbose_name_plural": "Locations",
                "ordering": ["building", "room"],
            },
        ),
        migrations.CreateModel(
            name="MicboardConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "key",
                    models.CharField(help_text="Configuration key", max_length=100, unique=True),
                ),
                ("value", models.TextField(help_text="Configuration value")),
            ],
            options={
                "verbose_name": "Micboard Configuration",
                "verbose_name_plural": "Micboard Configurations",
                "ordering": ["key"],
            },
        ),
        migrations.CreateModel(
            name="UserAlertPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "notification_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("websocket", "WebSocket (Real-time)"),
                            ("both", "Email + WebSocket"),
                        ],
                        default="both",
                        help_text="How alerts should be delivered",
                        max_length=20,
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        blank=True,
                        help_text="Override user's default email for alerts",
                        max_length=254,
                    ),
                ),
                (
                    "default_alert_battery_low",
                    models.BooleanField(
                        default=True, help_text="Default alert setting for battery low"
                    ),
                ),
                (
                    "default_alert_signal_loss",
                    models.BooleanField(
                        default=True, help_text="Default alert setting for signal loss"
                    ),
                ),
                (
                    "default_alert_audio_low",
                    models.BooleanField(
                        default=False, help_text="Default alert setting for audio low"
                    ),
                ),
                (
                    "default_alert_device_offline",
                    models.BooleanField(
                        default=True, help_text="Default alert setting for device offline"
                    ),
                ),
                (
                    "battery_low_threshold",
                    models.PositiveIntegerField(
                        default=20, help_text="Alert when battery percentage drops below this value"
                    ),
                ),
                (
                    "battery_critical_threshold",
                    models.PositiveIntegerField(default=10, help_text="Critical alert threshold"),
                ),
                (
                    "quiet_hours_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable quiet hours (no alerts during specified times)",
                    ),
                ),
                (
                    "quiet_hours_start",
                    models.TimeField(
                        blank=True, help_text="Start of quiet hours (e.g., 22:00)", null=True
                    ),
                ),
                (
                    "quiet_hours_end",
                    models.TimeField(
                        blank=True, help_text="End of quiet hours (e.g., 08:00)", null=True
                    ),
                ),
                (
                    "min_alert_interval",
                    models.PositiveIntegerField(
                        default=5, help_text="Minimum minutes between alerts for the same device"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When these preferences were created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update timestamp"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User these preferences belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Alert Preference",
                "verbose_name_plural": "User Alert Preferences",
            },
        ),
        migrations.CreateModel(
            name="Transmitter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("slot", models.PositiveIntegerField(help_text="Transmitter slot number")),
                (
                    "battery",
                    models.PositiveIntegerField(
                        default=255, help_text="Battery level (0-255, 255=unknown)"
                    ),
                ),
                ("audio_level", models.IntegerField(default=0, help_text="Audio level in dB")),
                ("rf_level", models.IntegerField(default=0, help_text="RF signal level")),
                (
                    "frequency",
                    models.CharField(blank=True, help_text="Operating frequency", max_length=20),
                ),
                (
                    "antenna",
                    models.CharField(blank=True, help_text="Antenna information", max_length=10),
                ),
                ("tx_offset", models.IntegerField(default=255, help_text="Transmitter offset")),
                (
                    "quality",
                    models.PositiveIntegerField(default=255, help_text="Signal quality (0-255)"),
                ),
                (
                    "runtime",
                    models.CharField(blank=True, help_text="Runtime information", max_length=20),
                ),
                (
                    "status",
                    models.CharField(blank=True, help_text="Transmitter status", max_length=50),
                ),
                (
                    "name",
                    models.CharField(blank=True, help_text="Transmitter name", max_length=100),
                ),
                (
                    "name_raw",
                    models.CharField(blank=True, help_text="Raw transmitter name", max_length=100),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update timestamp"),
                ),
                (
                    "device",
                    models.OneToOneField(
                        help_text="The device this transmitter belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transmitter",
                        to="micboard.device",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transmitter",
                "verbose_name_plural": "Transmitters",
                "ordering": ["device", "slot"],
            },
        ),
        migrations.CreateModel(
            name="MonitoringGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the monitoring group",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the monitoring group"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this monitoring group is active"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this group was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update timestamp"),
                ),
                (
                    "devices",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Devices assigned to this monitoring group",
                        related_name="monitoring_groups",
                        to="micboard.device",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Physical location associated with this group",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="monitoring_groups",
                        to="micboard.location",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users who are part of this monitoring group",
                        related_name="monitoring_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Monitoring Group",
                "verbose_name_plural": "Monitoring Groups",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DeviceAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="normal",
                        help_text="Priority level for this assignment",
                        max_length=10,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about this assignment (e.g., 'Lead vocalist mic')",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this assignment is currently active"
                    ),
                ),
                (
                    "alert_on_battery_low",
                    models.BooleanField(default=True, help_text="Alert when battery is low"),
                ),
                (
                    "alert_on_signal_loss",
                    models.BooleanField(default=True, help_text="Alert when RF signal is lost"),
                ),
                (
                    "alert_on_audio_low",
                    models.BooleanField(
                        default=False, help_text="Alert when audio level is too low"
                    ),
                ),
                (
                    "alert_on_device_offline",
                    models.BooleanField(default=True, help_text="Alert when device goes offline"),
                ),
                (
                    "assigned_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this assignment was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update timestamp"),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this assignment",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assignments_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "device",
                    models.ForeignKey(
                        help_text="Device being monitored",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="micboard.device",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Physical location of this device",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="device_assignments",
                        to="micboard.location",
                    ),
                ),
                (
                    "monitoring_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional monitoring group this assignment belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="device_assignments",
                        to="micboard.monitoringgroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User assigned to monitor this device",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="device_assignments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Device Assignment",
                "verbose_name_plural": "Device Assignments",
                "ordering": ["-priority", "device"],
            },
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(fields=["api_device_id"], name="micboard_de_api_dev_c182b0_idx"),
        ),
        migrations.AddIndex(
            model_name="device",
            index=models.Index(
                fields=["is_active", "last_seen"], name="micboard_de_is_acti_c6f394_idx"
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="assignment",
            field=models.ForeignKey(
                blank=True,
                help_text="Specific assignment this alert relates to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="alerts",
                to="micboard.deviceassignment",
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="device",
            field=models.ForeignKey(
                help_text="Device that triggered the alert",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="alerts",
                to="micboard.device",
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="user",
            field=models.ForeignKey(
                help_text="User who should receive the alert",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="alerts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="transmitter",
            index=models.Index(fields=["device", "slot"], name="micboard_tr_device__7f60ee_idx"),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["content_type", "object_id"], name="micboard_lo_content_7382f6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(fields=["building", "room"], name="micboard_lo_buildin_be6db4_idx"),
        ),
        migrations.AddIndex(
            model_name="deviceassignment",
            index=models.Index(fields=["user", "is_active"], name="micboard_de_user_id_e9366b_idx"),
        ),
        migrations.AddIndex(
            model_name="deviceassignment",
            index=models.Index(
                fields=["device", "is_active"], name="micboard_de_device__35fa75_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="deviceassignment",
            index=models.Index(
                fields=["priority", "is_active"], name="micboard_de_priorit_8cb9e2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="deviceassignment",
            unique_together={("user", "device")},
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["device", "alert_type", "status"], name="micboard_al_device__15b609_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["user", "status", "-created_at"], name="micboard_al_user_id_be5319_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="alert",
            index=models.Index(
                fields=["status", "created_at"], name="micboard_al_status_d7402e_idx"
            ),
        ),
    ]
