
name: CI
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]


jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache matrix.json
        uses: actions/cache@v4
        with:
          path: matrix.json
          key: matrix-${{ github.ref }}-${{ github.run_id }}
          restore-keys: |
            matrix-${{ github.ref }}-
      - name: Generate matrix
        id: gen-matrix
        run: |
          if [ ! -f matrix.json ] || [ $(find matrix.json -mtime +0) ]; then
            python3 .github/workflows/generate-matrix.py > matrix.json
          fi
      - name: Show generated matrix
        run: cat matrix.json
      - name: Set matrix output
        id: set-matrix
        run: |
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  test:
    if: '!startsWith(github.head_ref, ''renovate/'') && !startsWith(github.ref, ''refs/heads/renovate/'')'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: generate-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix).include }}
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Django~=${{ matrix.django-version }}
          pip install -e .[dev]
      - name: Run ruff
        run: |
          ruff check .
          ruff format --check .
      - name: Run mypy
        run: mypy micboard/ --ignore-missing-imports
      - name: Run bandit security scan
        run: bandit -r micboard/ -c pyproject.toml
      - name: Run safety dependency scan
        run: safety check --full-report
      - name: Run tests with coverage
        run: pytest tests/ -v --tb=short --cov=micboard --cov-report=lcov
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov

  build:
    if: '!startsWith(github.head_ref, ''renovate/'') && !startsWith(github.ref, ''refs/heads/renovate/'')'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Check package
        run: twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
