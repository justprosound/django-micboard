
name: CI
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]


jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache matrix.json
        uses: actions/cache@v4
        with:
          path: matrix.json
          key: matrix-${{ github.ref }}-${{ github.run_id }}
          restore-keys: |
            matrix-${{ github.ref }}-
      - name: Generate matrix
        id: gen-matrix
        run: |
          if [ ! -f matrix.json ] || [ $(find matrix.json -mtime +0) ]; then
            python3 .github/workflows/generate-matrix.py > matrix.json
          fi
      - name: Show generated matrix
        run: cat matrix.json
      - name: Set matrix output
        id: set-matrix
        run: |
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  test:
    if: '!startsWith(github.head_ref, ''renovate/'') && !startsWith(github.ref, ''refs/heads/renovate/'')'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: generate-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix).include }}
      max-parallel: 2
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Django~=${{ matrix.django-version }}
          pip install -e .[dev]
      - name: Run ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Django system check
        run: python manage.py check
      - name: Run mypy
        run: mypy micboard/ --ignore-missing-imports
      - name: Run bandit security scan
        run: bandit -r micboard/ -c pyproject.toml
      - name: Run safety dependency scan
        run: safety check --full-report
      - name: Run tests with coverage
        run: pytest tests/ -v --tb=short --cov=micboard --cov-report=lcov
        continue-on-error: true
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov

  build:
    if: '!startsWith(github.head_ref, ''renovate/'') && !startsWith(github.ref, ''refs/heads/renovate/'')'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: 'pip'
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Check package
        run: twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  demo-container:
    if: '!startsWith(github.head_ref, ''renovate/'') && !startsWith(github.ref, ''refs/heads/renovate/'')'
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/demo
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push demo container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./demo/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test demo container startup
        run: |
          # Pull the published container
          docker pull ${{ steps.meta.outputs.tags }}

          # Start container in background
          docker run -d --name demo-test -p 8000:8000 ${{ steps.meta.outputs.tags }}

          # Wait for Django to start
          timeout 60 bash -c 'until curl -f http://localhost:8000/ > /dev/null 2>&1; do sleep 2; done'

          # Check that the demo page loads
          curl -f http://localhost:8000/ | grep -q "Micboard"

          # Check API health endpoint
          curl -f http://localhost:8000/api/health/ | grep -q "status"

          # Clean up
          docker stop demo-test
          docker rm demo-test
